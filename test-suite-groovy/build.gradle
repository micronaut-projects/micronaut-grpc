plugins {
    id "groovy"
    alias(libs.plugins.protobuf)
    id "io.micronaut.build.internal.grpc-minimal-test"
}

// tag::variables[]
ext {
    grpcVersion = libs.versions.managed.grpc.asProvider().get()
    protobufVersion = libs.versions.managed.protobuf.asProvider().get()
}
// end::variables[]

mainClassName = "helloworld.Application"
micronaut {
    version.set(libs.versions.micronaut.platform.get())
    coreVersion.set(libs.versions.micronaut.asProvider().get())
    testRuntime "spock"
    enableNativeImage false
    processing {
        incremental(true)
        annotations("helloworld.*")
    }
}

dependencies {
    compileOnly libs.managed.grpc.stub
    compileOnly libs.javax.annotation.api
    compileOnly mnValidation.micronaut.validation.processor

    implementation mnValidation.micronaut.validation
    implementation mn.micronaut.runtime
    implementation projects.micronautGrpcRuntime
    implementation libs.micronaut.discovery.client
    implementation libs.managed.grpc.services
    implementation libs.managed.grpc.protobuf
    implementation libs.managed.protobuf.java.util
    implementation mn.snakeyaml

    runtimeOnly mnLogging.logback.classic

    testCompileOnly libs.javax.annotation.api

    testImplementation mn.groovy

    testRuntimeOnly mnLogging.logback.classic
}

tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.jvmArgs.add('-Dgroovy.parameters=true')
}

tasks.withType(org.gradle.jvm.tasks.Jar) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

sourceSets {
    main {
        groovy {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:$protobufVersion" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:$grpcVersion" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}
