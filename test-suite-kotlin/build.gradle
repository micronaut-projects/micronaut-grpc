plugins {
    alias(mn.plugins.kotlin.jvm)
    alias(mn.plugins.kotlin.kapt)
    alias(mn.plugins.kotlin.allopen)
    alias(libs.plugins.protobuf)
    id "io.micronaut.build.internal.grpc-minimal-test"
}

kotlin {
    jvmToolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

// tag::variables[]
ext {
    grpcVersion = libs.versions.managed.grpc.asProvider().get()
    grpcKotlinVersion = libs.versions.managed.grpc.kotlin.get()
    protobufVersion = libs.versions.managed.protobuf.asProvider().get()
}
// end::variables[]

mainClassName = "helloworld.Application"
micronaut {
    version.set(libs.versions.micronaut.platform.get())
    coreVersion.set(libs.versions.micronaut.asProvider().get())
    testRuntime "junit5"
    enableNativeImage false
    processing {
        incremental(true)
        annotations("helloworld.*")
    }
}

dependencies {
    kapt mnValidation.micronaut.validation.processor
    implementation mnValidation.micronaut.validation
    implementation mn.kotlin.stdlib.jdk8
    implementation mn.kotlin.reflect
    implementation mn.kotlinx.coroutines.core
    implementation mn.micronaut.runtime
    implementation projects.micronautGrpcServerRuntime
    implementation mn.snakeyaml

    // tag::dependencies[]
    implementation libs.managed.grpc.kotlin.stub
    implementation libs.managed.grpc.services
    compileOnly libs.managed.grpc.stub
    compileOnly libs.javax.annotation.api
    // end::dependencies[]

    runtimeOnly mnLogging.logback.classic
    runtimeOnly mn.jackson.module.kotlin

    testCompileOnly libs.javax.annotation.api

    testRuntimeOnly mnLogging.logback.classic
    testRuntimeOnly mn.jackson.module.kotlin
}

// tag::config[]

sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/grpckt'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:$protobufVersion" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:$grpcVersion" }
        grpckt { artifact = "io.grpc:protoc-gen-grpc-kotlin:${grpcKotlinVersion}:jdk8@jar" }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
            grpckt {}
        }
    }
}

// end::config[]
