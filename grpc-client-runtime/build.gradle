plugins {
    id 'io.micronaut.build.internal.grpc-module'
    alias libs.plugins.protobuf
}

dependencies {
    api platform(libs.boms.grpc)
    api projects.micronautGrpcAnnotation
    api projects.micronautGrpcOpentracing
    api libs.managed.grpc.core
    api libs.managed.grpc.protobuf
    api libs.managed.grpc.stub

    compileOnly mn.micronaut.discovery.core

    implementation libs.grpc.netty
    implementation mn.reactor
    implementation mn.micronaut.buffer.netty

    testCompileOnly libs.javax.annotation.api

    testImplementation projects.micronautGrpcServerRuntime
    testImplementation mn.micronaut.discovery.core
    testImplementation mnReactor.micronaut.reactor.http.client
    testImplementation mn.micronaut.jackson.databind
    testImplementation libs.opentracing.mock

    testRuntimeOnly mn.micronaut.jackson.databind
}

// compileJava.options.fork=true
// compileJava.options.forkOptions.jvmArgs = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005']

sourceSets {
    test {
        java {
            srcDirs 'build/generated/source/proto/test/grpc'
            srcDirs 'build/generated/source/proto/test/java'
        }
    }
}

protobuf {
    protoc { artifact = libs.managed.protoc.asProvider().get() }
    plugins {
        grpc { artifact = libs.managed.protoc.grpc.get() }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

micronautBuild {
    binaryCompatibility {
        acceptedRegressionsFile = file("config/accepted-api-changes.json")
    }
}

