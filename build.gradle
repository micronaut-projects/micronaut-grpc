buildscript {
    dependencies {
        classpath "io.micronaut.build.internal:micronaut-gradle-plugins:4.2.1"
    }
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }
}

subprojects { Project subproject ->
    group "io.micronaut.grpc"

    boolean isExampleOrBenchmark = subproject.parent.name == "docs-examples" || subproject.name.contains("example") || subproject.name.contains("benchmark")

    if (!isExampleOrBenchmark) {

        apply plugin: "io.micronaut.build.internal.common"
        apply plugin: "io.micronaut.build.internal.dependency-updates"
        apply plugin: "io.micronaut.build.internal.publishing"

        repositories {
            mavenCentral()
        }

        tasks.withType(JavaCompile) {
            options.encoding = "UTF-8"
            options.compilerArgs.addAll([
                    '-parameters',
                    // enables incremental compilation
                    '-Amicronaut.processing.incremental=true',
                    "-Amicronaut.processing.group=$project.group",
                    "-Amicronaut.processing.module=$project.name",
            ])
            options.forkOptions.memoryMaximumSize = "2g"
        }

        tasks.withType(GroovyCompile).configureEach {
            options.encoding = "UTF-8"
            options.compilerArgs.addAll(["-Amicronaut.processing.group=$project.group",
                                         "-Amicronaut.processing.module=micronaut-$project.name"
            ])
            groovyOptions.forkOptions.memoryMaximumSize = "2g"
        }

        tasks.withType(Checkstyle).configureEach {
            reports.xml.required = !System.getenv("GITHUB_ACTIONS")
            reports.html.required = !System.getenv("GITHUB_ACTIONS")
        }

    } else {
        repositories {
            mavenCentral()
        }
        apply plugin: 'java'

        project.gradle.startParameter.excludedTaskNames.addAll(['checkstyleMain', 'checkstyleNohttp'])

    }

    dependencies {
        implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
        annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
        testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    }

    configurations {
        all {
            resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                if (details.requested.name == 'groovy-all') {
                    throw new GradleException("Dependency 'groovy-all' not allowed!")
                }
                if (spockVersion && details.requested.group == 'org.spockframework') {
                    details.useVersion spockVersion
                }
            }
            if (micronautTestVersion) {
                resolutionStrategy.force "io.micronaut.test:micronaut-test-spock:$micronautTestVersion"
            }
        }
    }

    tasks.withType(Test) {
        useJUnitPlatform()
    }
}

apply plugin: "io.micronaut.build.internal.docs"
apply plugin: "io.micronaut.build.internal.dependency-updates"
